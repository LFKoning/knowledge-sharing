TODO: Add reflog somewhere
TODO: Add git log --graph somewhere

# ------------------------------- #
# commit and log                  #
# ------------------------------- #

git init

echo '"""Main program module."""' > main.py

git status

git add -A

git status

git commit -m "Create main module."


# ------------------------------- #
# multiple commits                #
# ------------------------------- #

echo '"""Utility functions module."""' > utils.py

git add -A

git commit -m "Create utility module."

# ------------------------------- #
"""Main program module."""


def main():
	"""Main program routine."""
	print("Hello World!")


if __name__ == "__main__":
	main()

# ------------------------------- #

git add -A

git commit -m "Update main module."

git log


# ------------------------------- #
# commit objects                  #
# ------------------------------- #

git cat-file -p <commit>

git cat-file -p <tree>

git cat-file -p <file>


# ------------------------------- #
# commit update                   #
# ------------------------------- #

git cat-file -p <commit>

git cat-file -p <tree>


# ------------------------------- #
# git diff                        #
# ------------------------------- #


# ------------------------------- #
"""Utility functions module."""

def mean(values):
	"""Compute mean of a list of values."""
	return sum(values) / len(values)

# ------------------------------- #

git diff utils.py

git add -A

git diff utils.py

git diff HEAD utils.py


# ------------------------------- #
# .gitignore                      #
# ------------------------------- #

mkdir data

git status

ni data/.gitkeep

ni data/real_data.csv

git status

echo "# Cache files.
__pycache__/
*.py[cod]

# Notebook checkpoints.
.ipynb_checkpoints

# Data folder.
data/**
# !data/.gitkeep

# Virtual environments.
.env
.venv
env/
ENV/
venv/" > .gitignore


# ------------------------------- #
# checkout file                   #
# ------------------------------- #

git log

git checkout <older>  -- main.py

cat main.py

git checkout HEAD main.py

cat main.py


# ------------------------------- #
# checkout commit                 #
# ------------------------------- #

git log

git checkout <older>

git checkout main


# ------------------------------- #
# reset hard                      #
# ------------------------------- #

del *.py

dir

git reset --hard HEAD

dir

git log

git reset --hard <older>

dir

git log

git checkout <latest>

git checkout main

git reset --hard <latest>


# ------------------------------- #
# HEAD and refs                   #
# ------------------------------- #

cat .git/HEAD

cat .git/refs/heads/main

del utils.py

git add -A

git commit -m "Remove utils"

cat .git/HEAD

cat .git/refs/heads/main

git log


# ------------------------------- #
# create branch                   #
# ------------------------------- #

cat .git/HEAD

cat .git/refs/heads/main

git checkout -b develop

git branch

cat .git/HEAD

cat .git/refs/heads/develop

mkdir src/hello_world
mv main.py src/hello_world

git add -A
git commit -m "Refactor structure"

cat .git/refs/heads/develop

cat .git/refs/heads/main


# ------------------------------- #
# merge no fast forward           #
# ------------------------------- #

cd merge-no-ff

git checkout develop

git log

git checkout main

git log

git merge develop

# Fix conflict

git add -A
git commit -m "Merge develop"

git log

git cat-files -p <merge commit>


# ------------------------------- #
# squash merge                    #
# ------------------------------- #

cd merge-squash

git checkout main

git log

git merge --squash develop

git log

# TODO: next steps?


# ------------------------------- #
# rebase merge                    #
# ------------------------------- #

cd merge-rebase

git checkout develop

git log

# Parent is Main commit 1.
git cat-file -p 08f89bcb30d3f1bbe45bafc7b1bffc42a207fe07

git rebase main

# New commits on the develop branch.
# Heads have not moved.
git log

# Parent is now Main commit 2.
git cat-file -p 2d11814c77c457e2436c74d1d23697878e90f465



# ------------------------------- #
# merge conflict                  #
# ------------------------------- #

cd merge-conflict

git checkout main

git log

# Displays conflict warning.
git merge develop

# Nothing has changed yet.
git log

# Show conflicts; marked conflicts from main and develop.
git diff

# Edit the file, fix the conflicts.

git add -A
git commit -m "Merged develop"


