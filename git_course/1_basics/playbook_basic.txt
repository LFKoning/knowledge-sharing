# ------------------------------- #
# initial commit                  #
# ------------------------------- #

git init

echo '"""Main program module."""' > main.py

# New items in red
git status

git add -A

# New items in green
git status

git commit -m "Create main module."

# Nothing to commit, tree clean 
git status

# Show the log
git log


# ------------------------------- #
# multiple commits                #
# ------------------------------- #

echo '"""Utility functions module."""' > utils.py

git add -A

git commit -m "Create utility module."

code main.py

# copy - paste into main.py
# ------------------------------- #
def main():
    """Main program routine."""
    print("Hello World!")


if __name__ == "__main__":
    main()
# ------------------------------- #

git add -A

git commit -m "Update main module."

# Now displays 3 commits.
git log


# ------------------------------- #
# commit objects                  #
# ------------------------------- #

# Look at first commit.

# Commit object points to tree.
git cat-file -p _

# Tree object points to files.
git cat-file -p _

# Blob object shows file contents.
git cat-file -p _


# ------------------------------- #
# commit added file               #
# ------------------------------- #

# Look at second commit.
git cat-file -p _

# Look at second tree.
# Note that main.py uses same blob.
git cat-file -p _

# Optional: look at update commit.


# ------------------------------- #
# .gitignore                      #
# ------------------------------- #

mkdir data

# Folder does not show...
git status

ni data/.gitkeep

ni data/data.csv

# File make the folder appear.
git status

git add -A

# Shows two files.
git status

git reset

code .gitignore

# copy - paste into .gitignore
# ------------------------------- #
# Cache files.
__pycache__/
*.py[cod]

# Notebook checkpoints.
.ipynb_checkpoints

# Data folder.
data/**
# !data/.gitkeep

# Virtual environments.
.env
.venv
env/
ENV/
venv/
# ------------------------------- #

# Data folder is now ignored entirely.
git status

# Uncomment # !data/.gitkeep
# Shows data/.gitkeep again.
git status

git add -A
git commit -m "Add .gitignore and data folder"


# ------------------------------- #
# git diff                        #
# ------------------------------- #

code utils.py

# copy - paste into utils.py
# ------------------------------- #
def mean(values):
    """Compute mean of a list of values."""
    return sum(values) / len(values)
# ------------------------------- #

# Show local changes.
git diff utils.py

git add -A

# Added to index, no changes.
git diff utils.py

# Compare to last commit directly.
git diff HEAD utils.py

git commit -m "Add mean to utils"

code utils.py

# copy - paste into utils.py
# ------------------------------- #
def abs_mean(values):
    """Compute mean of a list of values."""
    values = [abs(v) for v in values]
    return sum(values) / len(values)
# ------------------------------- #

git add -A

git commit -m "Add abs_mean to utils"

# Compare main to first commit.
git diff _ _ utils.py


# ------------------------------- #
# checkout file                   #
# ------------------------------- #

git log

# Updated version of main.
cat main.py

# Checkout main.py from first commit.
git checkout _  main.py

# Original version of main.
cat main.py

# Show differences with HEAD.
git diff HEAD main.py

# Checkout main.py from HEAD.
git checkout HEAD main.py

# Back to updated main.
cat main.py


# ------------------------------- #
# checkout commit                 #
# ------------------------------- #

git log

# Moves HEAD to the oldest commit!
git checkout _

# No longer seeing main...
git log

# No longer working on main...
git status

# Oldest version of main.
cat main.py

# Only untracked data.csv in data/
dir data/

# Can go back when no changes made.
git checkout main

# HEAD is pointing to main.
git log

# Everything is back...
dir


# ------------------------------- #
# reset hard                      #
# ------------------------------- #

# Deleted all Python files... woops!
del *.py

dir

# Hard reset to restore working directory.
git reset --hard HEAD

dir

# Hard reset to first commit.
git reset --hard _

dir

# HEAD and main set to old commit.
git log

# Use reflog to reset back to the last commit.
git reflog

git log -g

# Checkout the last commit.
git reset --hard _

# Pfew, all good...
git log


# ------------------------------- #
# HEAD and refs                   #
# ------------------------------- #

# Points to refs/heads/main.
cat .git/HEAD

# Points to last commit.
cat .git/refs/heads/main

ni README.md

git add -A

git commit -m "Add README"

# Points to the new commit.
# Heads are dynamically updated labels.
cat .git/refs/heads/main

# No change here.
cat .git/HEAD


# ------------------------------- #
# create branch                   #
# ------------------------------- #

# Points to main.
cat .git/HEAD

# Creates a new branch.
git checkout -b develop

# Now points to develop.
cat .git/HEAD

# Points to same commit as main!
# Only HEAD has changed.
cat .git/refs/heads/develop

cat .git/refs/heads/main

# Create a new commit.
echo "# Hello World" > README.md
git add -A
git commit -m "Update README.md"

# Develop has moved on.
cat .git/refs/heads/develop

# Main has not.
cat .git/refs/heads/main



# ------------------------------- #
# merge fast forward           #
# ------------------------------- #

cd merge-ff

# Two commits on develop after first main commit.
git log

# Show the files.
dir
cat develop.txt

# Switch to main branch
git checkout main

# No commits after the first, can fast forward.
git log

# Only main.txt
dir

# Note that git says it fast forwarded.
git merge develop

# Check the log for main.
# Main and develop piont to the same commit.
git log

# Main now has develop.txt too.
dir


# ------------------------------- #
# merge no fast forward           #
# ------------------------------- #

cd merge-no-ff

# Show commits on develop branch.
git log

# Switch to main branch.
git checkout main

# Second commit sits between develop commits.
git log

# Merge develop into main.
git merge develop

# Got an extra merge commit!
git log

# Double parent on the merge commit!
git cat-files -p <merge commit>

# Show as a graph.
git log --graph


# ------------------------------- #
# rebase merge                    #
# ------------------------------- #

cd merge-rebase

# Again 2 commits.
git log

# Switch to main.
git checkout main

# Commit in between develop commits.
git log

# Rebase develop on current main.
# Switches branch to develop!
git rebase main develop

# Show log.
# Develop commits now follow main commits.
# Rewrite created new commits (check hashes).
git log

# Switch back to main.
git checkout main

# Perform fast forward merge.
git merge

# Commits now both on main and develop.
# No merge commit was created!
git log

# Graph shows single line.
git log --graph


# ------------------------------- #
# squash merge                    #
# ------------------------------- #

cd merge-squash

# Two commits on develop.
git log

# Switch to main.
git checkout main

# Two commits on main.
git log

# Squash merge.
git merge --squash develop

# Nothing changed; merged but not committed...
git log

# Git commit
git status
git add -A
git commit -m "Merge develop"

# Check commit on main.
git log

# Check log on develop.
# Branches have become incompatible!
git log develop


# ------------------------------- #
# merge conflict                  #
# ------------------------------- #

cd merge-conflict

git log

# Displays conflict warning.
git merge develop

# No new commits yet.
git log

# View conflicting files under unmerged paths.
git status

# Can always abort the merge
git merge --abort

git status

git merge develop

# Show conflicted file.
cat main.txt

# Edit the file, fix any conflicts.
code main.txt

git add -A
git commit -m "Merge develop"

git log --graph

